
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int         @id @default(autoincrement())
  author    User        @relation(fields: [authorId], references: [id])
  authorId  String
  title     String
  content   String?
  isVisible Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime? 
  paragraphs Paragraph[]
  headings   Heading[]
}

//  Μια πρώτη σκέψη τα post να έχουν παραγράφους για να τραβάνε το <p> attr της HTML

model Paragraph {
  id      Int    @id @default(autoincrement())
  content String
  sorder  Int
  post    Post   @relation(fields: [postId], references: [id])
  postId  Int
}

//  Ομοίως και headings

model Heading {
  id         Int    @id @default(autoincrement())
  content    String
  sorder     Int
  importance Int  // h1-h6
  post       Post   @relation(fields: [postId], references: [id])
  postId     Int
}
// Δυστυχώς δεν υποστηρίζονται επαρκώς οι όψεις 
// καθώς προς παρόν θέλουν μοναδικό id (αν είναι δυνατόν) 
// και χειροκίνητο model στο παρόν schema,
// το οποίο διαγράφεται σε κάθε introspection (!)
// δες εδώ λεπτομέρειες: [https://www.prisma.io/docs/guides/database/advanced-database-tasks/sql-views-postgres]

// Όμως, όπως διαβάζουμε εδώ: [https://github.com/prisma/prisma/issues/2505]),
// ούτε το union υποστηρίζεται (!)

// Άρα αυτό που θα ήταν view ή union 
// θα γίνει model και θα κάνουμε εισαγωγή εκεί σε κάθε νέο html attr.
// το δίλλημα τώρα είναι, να χρησιμοποιώ και τους επιμέρους πίνακες (πχ paragraph και heading) 
// ή να γράφω κατευθείαν σε αυτό και μόνο το model?? 
// Κι αν γράφω και στα δύο (και επιμέρους πίνακες και το νέο model), 
// αυτό να γίνεται με prisma.$transaction του prisma ή με trigger στη βάση?

// Απαραίτητα models για το next-auth σύμφωνα με https://next-auth.js.org/adapters/prisma

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  userName      String?
  displayName   String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isConfirmed   Boolean   @default(false)
  isAuthor      Boolean   @default(false)
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
