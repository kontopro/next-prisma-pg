
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int        @id @default(autoincrement())
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String
  title     String
  slug      String?
  intro     String?
  fimage    String?      @default("https://via.placeholder.com/500x300/d33a2c/?text=no+image")
  tag       String?
  category  String?
  isApproved Boolean    @default(true)
  isVisible Boolean     @default(true)
  publishedAt DateTime?  @db.Date @default(now())   
  createdAt DateTime    @default(now())
  updatedAt DateTime? 
  elements Element[]
}

model Element {
  id         Int         @id @default(autoincrement())
  content    String?
  attr       String
  sorder     Int
  importance Int         @default(0)// h1-h6 or not?
  post       Post        @relation(fields: [postId], references: [id])
  postId     Int
}

// Απαραίτητα models για το next-auth σύμφωνα με https://next-auth.js.org/adapters/prisma

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  userName      String?
  displayName   String?   @default("No name")
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isConfirmed   Boolean   @default(false)
  isAuthor      Boolean   @default(false)
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
